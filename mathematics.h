#include "utilities.h"

#include <math.h>

union Matrix4 {
    f32 m[16];
    f32 m2[4][4];
};

static Matrix4 createIdentityMatrix(){
    Matrix4 m;
    m.m[0] = 1; m.m[1] = 0; m.m[2] = 0; m.m[3] = 0;
    m.m[4] = 0; m.m[5] = 1; m.m[6] = 0; m.m[7] = 0;
    m.m[8] = 0; m.m[9] = 0; m.m[10] = 1; m.m[11] = 0;
    m.m[12] = 0; m.m[13] = 0; m.m[14] = 0; m.m[15] = 1;
    return m;
}

static Matrix4 multiply(Matrix4 m1, Matrix4 m2){
    Matrix4 m;

    m.m[0] = m1.m2[0][0] * m2.m2[0][0] + m1.m2[1][0] * m2.m2[0][1] + m1.m2[2][0] * m2.m2[0][2] + m1.m2[3][0] * m2.m2[0][3];
    m.m[1] = m1.m2[0][1] * m2.m2[0][0] + m1.m2[1][1] * m2.m2[0][1] + m1.m2[2][1] * m2.m2[0][2] + m1.m2[3][1] * m2.m2[0][3];
    m.m[2] = m1.m2[0][2] * m2.m2[0][0] + m1.m2[1][2] * m2.m2[0][1] + m1.m2[2][2] * m2.m2[0][2] + m1.m2[3][2] * m2.m2[0][3];
    m.m[3] = m1.m2[0][3] * m2.m2[0][0] + m1.m2[1][3] * m2.m2[0][1] + m1.m2[2][3] * m2.m2[0][2] + m1.m2[3][3] * m2.m2[0][3];

    m.m[4] = m1.m2[0][0] * m2.m2[1][0] + m1.m2[1][0] * m2.m2[1][1] + m1.m2[2][0] * m2.m2[1][2] + m1.m2[3][0] * m2.m2[1][3];
    m.m[5] = m1.m2[0][1] * m2.m2[1][0] + m1.m2[1][1] * m2.m2[1][1] + m1.m2[2][1] * m2.m2[1][2] + m1.m2[3][1] * m2.m2[1][3];
    m.m[6] = m1.m2[0][2] * m2.m2[1][0] + m1.m2[1][2] * m2.m2[1][1] + m1.m2[2][2] * m2.m2[1][2] + m1.m2[3][2] * m2.m2[1][3];
    m.m[7] = m1.m2[0][3] * m2.m2[1][0] + m1.m2[1][3] * m2.m2[1][1] + m1.m2[2][3] * m2.m2[1][2] + m1.m2[3][3] * m2.m2[1][3];

    m.m[8] = m1.m2[0][0] * m2.m2[2][0] + m1.m2[1][0] * m2.m2[2][1] + m1.m2[2][0] * m2.m2[2][2] + m1.m2[3][0] * m2.m2[2][3];
    m.m[9] = m1.m2[0][1] * m2.m2[2][0] + m1.m2[1][1] * m2.m2[2][1] + m1.m2[2][1] * m2.m2[2][2] + m1.m2[3][1] * m2.m2[2][3];
    m.m[10] = m1.m2[0][2] * m2.m2[2][0] + m1.m2[1][2] * m2.m2[2][1] + m1.m2[2][2] * m2.m2[2][2] + m1.m2[3][2] * m2.m2[2][3];
    m.m[11] = m1.m2[0][3] * m2.m2[2][0] + m1.m2[1][3] * m2.m2[2][1] + m1.m2[2][3] * m2.m2[2][2] + m1.m2[3][3] * m2.m2[2][3];

    m.m[12] = m1.m2[0][0] * m2.m2[3][0] + m1.m2[1][0] * m2.m2[3][1] + m1.m2[2][0] * m2.m2[3][2] + m1.m2[3][0] * m2.m2[3][3];
    m.m[13] = m1.m2[0][1] * m2.m2[3][0] + m1.m2[1][1] * m2.m2[3][1] + m1.m2[2][1] * m2.m2[3][2] + m1.m2[3][1] * m2.m2[3][3];
    m.m[14] = m1.m2[0][2] * m2.m2[3][0] + m1.m2[1][2] * m2.m2[3][1] + m1.m2[2][2] * m2.m2[3][2] + m1.m2[3][2] * m2.m2[3][3];
    m.m[15] = m1.m2[0][3] * m2.m2[3][0] + m1.m2[1][3] * m2.m2[3][1] + m1.m2[2][3] * m2.m2[3][2] + m1.m2[3][3] * m2.m2[3][3];

    return m;
}

static Matrix4 createPerspectiveProjection(f32 fov, f32 aspect, f32 znear, f32 zfar){
    Matrix4 m;
    m.m[0] = 1 / (aspect * tan(fov / 2.0));
    m.m[1] = 0;
    m.m[2] = 0;
    m.m[3] = 0;
    m.m[4] = 0;
    m.m[5] = 1 / (tan(fov / 2.0));
    m.m[6] = 0;
    m.m[7] = 0;
    m.m[8] = 0;
    m.m[9] = 0;
    m.m[10] = -(zfar + znear) / (zfar - znear);
    m.m[11] = -1;
    m.m[12] = 0;
    m.m[13] = 0;
    m.m[14] = -(zfar * znear) / (zfar - znear);
    m.m[15] = 0;
    return m;
}